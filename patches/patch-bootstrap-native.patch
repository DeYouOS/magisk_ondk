--- a/src/bootstrap/native.rs
+++ b/src/bootstrap/native.rs
@@ -154,7 +154,7 @@ fn run(self, builder: &Builder<'_>) -> PathBuf {

         builder.update_submodule(&Path::new("src").join("llvm-project"));
         if builder.config.llvm_link_shared
-            && (target.contains("windows") || target.contains("apple-darwin"))
+            && (target.contains("windows"))
         {
             panic!("shared linking to LLVM is not currently supported on {}", target.triple);
         }
@@ -241,13 +241,6 @@ fn run(self, builder: &Builder<'_>) -> PathBuf {
             cfg.define("LLVM_ENABLE_ZLIB", "OFF");
         }

-        if builder.config.llvm_thin_lto {
-            cfg.define("LLVM_ENABLE_LTO", "Thin");
-            if !target.contains("apple") {
-                cfg.define("LLVM_ENABLE_LLD", "ON");
-            }
-        }
-
         // This setting makes the LLVM tools link to the dynamic LLVM library,
         // which saves both memory during parallel links and overall disk space
         // for the tools. We don't do this on every platform as it doesn't work
@@ -324,9 +317,10 @@ fn run(self, builder: &Builder<'_>) -> PathBuf {
             // FIXME: if the llvm root for the build triple is overridden then we
             //        should use llvm-tblgen from there, also should verify that it
             //        actually exists most of the time in normal installs of LLVM.
-            let host_bin = builder.llvm_out(builder.config.build).join("bin");
+            let host_bin = builder.llvm_out(builder.config.build).join("build").join("bin");
             cfg.define("CMAKE_CROSSCOMPILING", "True");
             cfg.define("LLVM_TABLEGEN", host_bin.join("llvm-tblgen").with_extension(EXE_EXTENSION));
+            cfg.define("CLANG_TABLEGEN", host_bin.join("clang-tblgen").with_extension(EXE_EXTENSION));
             cfg.define("LLVM_NM", host_bin.join("llvm-nm").with_extension(EXE_EXTENSION));
             cfg.define(
                 "LLVM_CONFIG_PATH",
@@ -349,14 +343,6 @@ fn run(self, builder: &Builder<'_>) -> PathBuf {
             cfg.define("LLVM_VERSION_SUFFIX", suffix);
         }

-        if let Some(ref linker) = builder.config.llvm_use_linker {
-            cfg.define("LLVM_USE_LINKER", linker);
-        }
-
-        if builder.config.llvm_allow_old_toolchain {
-            cfg.define("LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN", "YES");
-        }
-
         configure_cmake(builder, target, &mut cfg, true, ldflags);

         for (key, val) in &builder.config.llvm_build_config {
@@ -513,6 +499,21 @@ fn configure_cmake(
             .define("CMAKE_ASM_COMPILER", sanitize_cc(cc));
     }

+    if builder.config.llvm_thin_lto {
+        cfg.define("LLVM_ENABLE_LTO", "Thin");
+        if !target.contains("apple") {
+            cfg.define("LLVM_ENABLE_LLD", "ON");
+        }
+    }
+
+    if let Some(ref linker) = builder.config.llvm_use_linker {
+        cfg.define("LLVM_USE_LINKER", linker);
+    }
+
+    if builder.config.llvm_allow_old_toolchain {
+        cfg.define("LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN", "YES");
+    }
+
     cfg.build_arg("-j").build_arg(builder.jobs().to_string());
     let mut cflags: OsString = builder.cflags(target, GitRepo::Llvm, CLang::C).join(" ").into();
     if let Some(ref s) = builder.config.llvm_cflags {
